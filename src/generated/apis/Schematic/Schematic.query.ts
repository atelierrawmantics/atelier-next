import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import {
  CommonErrorType,
  SchematicErrorMessageType,
  SchematicUseErrorMessageType,
} from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { SchematicApi } from './Schematic.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const schematicApi = new SchematicApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_SCHEMATIC_API = {
  PROJECT_SCHEMATIC_LIST: (
    variables?: Parameter<typeof schematicApi.projectSchematicList>,
  ) => ['PROJECT_SCHEMATIC_LIST', variables].filter(isDefined),
  PROJECT_SCHEMATIC_LIST_INFINITE: (
    variables?: Parameter<typeof schematicApi.projectSchematicList>,
  ) => ['PROJECT_SCHEMATIC_LIST_INFINITE', variables].filter(isDefined),
  PROJECT_SCHEMATIC_CREATE: () => ['PROJECT_SCHEMATIC_CREATE'],
  PROJECT_SCHEMATIC_RETRIEVE: (
    variables?: Parameter<typeof schematicApi.projectSchematicRetrieve>,
  ) => ['PROJECT_SCHEMATIC_RETRIEVE', variables].filter(isDefined),
  PROJECT_SCHEMATIC_DESTROY: () => ['PROJECT_SCHEMATIC_DESTROY'],
  PROJECT_SCHEMATIC_USE_CREATE: () => ['PROJECT_SCHEMATIC_USE_CREATE'],
}

/**
 * No description
 *
 * @tags schematic
 * @name ProjectSchematicList
 * @summary 도식화 목록 조회
 * @request GET:/v1/project/{project_slug}/schematic/
 * @secure    */

export const useProjectSchematicListQuery = <
  TData = RequestFnReturn<typeof schematicApi.projectSchematicList>,
>(
  params: QueryHookParams<
    typeof schematicApi.projectSchematicList,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_LIST(
    params.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => schematicApi.projectSchematicList(params.variables),
    ...params?.options,
  })
}

/**
 * No description    *      * @tags schematic
 * @name ProjectSchematicList
 * @summary 도식화 목록 조회
 * @request GET:/v1/project/{project_slug}/schematic/
 * @secure    */
export const useProjectSchematicListInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof schematicApi.projectSchematicList>,
    Parameter<typeof schematicApi.projectSchematicList>
  >,
>(
  params: InfiniteQueryHookParams<
    typeof schematicApi.projectSchematicList,
    CommonErrorType,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_LIST_INFINITE(
    params.variables,
  )
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }: { pageParam: any }) => {
      return schematicApi.projectSchematicList({
        ...params?.variables,
        query:
          pageParam ?
            { ...params?.variables?.query, cursor: pageParam }
          : { ...params?.variables?.query },
      })
    },
    getNextPageParam: (lastPage) => {
      return lastPage.cursor
    },
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags schematic
 * @name ProjectSchematicCreate
 * @summary 도식화 등록
 * @request POST:/v1/project/{project_slug}/schematic/
 * @secure  */

export const useProjectSchematicCreateMutation = (
  params: MutationHookParams<
    typeof schematicApi.projectSchematicCreate,
    { error: SchematicErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: schematicApi.projectSchematicCreate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags schematic
 * @name ProjectSchematicRetrieve
 * @summary 도식화 상세 조회
 * @request GET:/v1/project/{project_slug}/schematic/{id}/
 * @secure    */

export const useProjectSchematicRetrieveQuery = <
  TData = RequestFnReturn<typeof schematicApi.projectSchematicRetrieve>,
>(
  params: QueryHookParams<
    typeof schematicApi.projectSchematicRetrieve,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_RETRIEVE(
    params.variables,
  )
  return useQuery({
    queryKey,
    queryFn: () => schematicApi.projectSchematicRetrieve(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags schematic
 * @name ProjectSchematicDestroy
 * @summary 도식화 삭제
 * @request DELETE:/v1/project/{project_slug}/schematic/{id}/
 * @secure  */

export const useProjectSchematicDestroyMutation = (
  params: MutationHookParams<
    typeof schematicApi.projectSchematicDestroy,
    { error: CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_DESTROY()
  return useMutation({
    mutationKey,
    mutationFn: schematicApi.projectSchematicDestroy,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags schematic
 * @name ProjectSchematicUseCreate
 * @summary 도식화 사용
 * @request POST:/v1/project/{project_slug}/schematic/{id}/use/
 * @secure  */

export const useProjectSchematicUseCreateMutation = (
  params: MutationHookParams<
    typeof schematicApi.projectSchematicUseCreate,
    { error: SchematicUseErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_SCHEMATIC_API.PROJECT_SCHEMATIC_USE_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: schematicApi.projectSchematicUseCreate,
    ...params?.options,
  })
}
