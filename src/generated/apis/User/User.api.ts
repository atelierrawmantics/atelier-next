import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  CommonErrorType,
  UserErrorMessageType,
  UserRefreshErrorMessageType,
  UserRefreshRequestType,
  UserRefreshType,
  UserRegisterErrorMessageType,
  UserRegisterRequestType,
  UserRegisterType,
  UserRequestType,
  UserSocialLoginRequestType,
  UserSocialLoginType,
  UserSocialLoginValidationErrorType,
  UserType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class UserApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @tags user
   * @name UserRefreshCreate
   * @summary 유저 리프레시
   * @request POST:/v1/user/refresh/
   * @secure
   */

  userRefreshCreate = (variables: {
    data: DeepOmitReadOnly<UserRefreshRequestType>
    params?: RequestParams
  }) =>
    this.request<
      UserRefreshType,
      UserRefreshErrorMessageType | CommonErrorType
    >({
      path: `/v1/user/refresh/`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * @description 소셜 유저인 경우 `socialToken`을 전달해야합니다.
   *
   * @tags user
   * @name UserRegisterCreate
   * @summary 유저 회원가입
   * @request POST:/v1/user/register/
   * @secure
   */

  userRegisterCreate = (variables: {
    data: DeepOmitReadOnly<UserRegisterRequestType>
    params?: RequestParams
  }) =>
    this.request<
      UserRegisterType,
      UserRegisterErrorMessageType | CommonErrorType
    >({
      path: `/v1/user/register/`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * @description ![social_login_flow]({settings.STATIC_URL}docs/social_login_flow.jpeg) 1. 소셜 로그인(인가코드 발급) - Method: `GET` - Url: 각 소셜 로그인 문서 참고 - Parameter: - `client_id`: 앱 ID - `redirect_uri`: 인가 코드를 전달받을 프런트 URI(redirect_uri는 소셜 앱 설정에 등록해야합니다.) - `response_type`: `code`로 고정 - `state`: `kakao` | `naver` | `google` | `apple` | `facebook` - Description: - 소셜 로그인을 진행할 페이지를 띄워야 하기 때문에 route를 이동해줘야 합니다. - `redirect_uri`는 소셜 로그인 후 돌아올 프런트 URI이며 쿼리 스트링과 함께 리턴 받습니다. - 소셜 로그인 후 해당 페이지에서 쿼리 스트링의 code와 state를 읽어 저장해둔다. 2. 소셜 로그인(인가코드 검증) 3. 소셜 회원가입 - `isRegister: true`인 경우 `access`, `refresh`를 저장 후 로그인 처리를 합니다. - `isRegister: false`인 경우 `socialToken`을 사용해 회원가입을 진행합니다.
   *
   * @tags user
   * @name UserSocialLoginCreate
   * @summary 유저 소셜 로그인
   * @request POST:/v1/user/social_login/
   * @secure
   */

  userSocialLoginCreate = (variables: {
    data: DeepOmitReadOnly<UserSocialLoginRequestType>
    params?: RequestParams
  }) =>
    this.request<
      UserSocialLoginType,
      UserSocialLoginValidationErrorType | CommonErrorType
    >({
      path: `/v1/user/social_login/`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags user
   * @name UserRetrieve
   * @summary 유저 조회
   * @request GET:/v1/user/{id}/
   * @secure
   */

  userRetrieve = (variables: { id: string; params?: RequestParams }) =>
    this.request<UserType, CommonErrorType>({
      path: `/v1/user/${variables.id}/`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags user
   * @name UserUpdate
   * @summary 유저 수정
   * @request PUT:/v1/user/{id}/
   * @secure
   */

  userUpdate = (variables: {
    id: string
    data: DeepOmitReadOnly<UserRequestType>
    params?: RequestParams
  }) =>
    this.request<UserType, UserErrorMessageType | CommonErrorType>({
      path: `/v1/user/${variables.id}/`,
      method: 'PUT',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags user
   * @name UserDestroy
   * @summary 유저 삭제(탈퇴)
   * @request DELETE:/v1/user/{id}/
   * @secure
   */

  userDestroy = (variables: { id: string; params?: RequestParams }) =>
    this.request<void, CommonErrorType>({
      path: `/v1/user/${variables.id}/`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    })
}

//
