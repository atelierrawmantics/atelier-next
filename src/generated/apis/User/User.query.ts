import { useMutation, useQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import {
  CommonErrorType,
  UserErrorMessageType,
  UserRefreshErrorMessageType,
  UserRegisterErrorMessageType,
  UserSocialLoginValidationErrorType,
} from '../@types/data-contracts'
import {
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { UserApi } from './User.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const userApi = new UserApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_USER_API = {
  REFRESH_CREATE: () => ['USER_REFRESH_CREATE'],
  REGISTER_CREATE: () => ['USER_REGISTER_CREATE'],
  SOCIAL_LOGIN_CREATE: () => ['USER_SOCIAL_LOGIN_CREATE'],
  RETRIEVE: (variables?: Parameter<typeof userApi.userRetrieve>) =>
    ['USER_RETRIEVE', variables].filter(isDefined),
  UPDATE: () => ['USER_UPDATE'],
  DESTROY: () => ['USER_DESTROY'],
}

/**
 * No description
 *
 * @tags user
 * @name UserRefreshCreate
 * @summary 유저 리프레시
 * @request POST:/v1/user/refresh/
 * @secure  */

export const useUserRefreshCreateMutation = (
  params: MutationHookParams<
    typeof userApi.userRefreshCreate,
    { error: UserRefreshErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API.REFRESH_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: userApi.userRefreshCreate,
    ...params?.options,
  })
}

/**
 * @description 소셜 유저인 경우 `socialToken`을 전달해야합니다.
 *
 * @tags user
 * @name UserRegisterCreate
 * @summary 유저 회원가입
 * @request POST:/v1/user/register/
 * @secure  */

export const useUserRegisterCreateMutation = (
  params: MutationHookParams<
    typeof userApi.userRegisterCreate,
    { error: UserRegisterErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API.REGISTER_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: userApi.userRegisterCreate,
    ...params?.options,
  })
}

/**
 * @description ![social_login_flow]({settings.STATIC_URL}docs/social_login_flow.jpeg) 1. 소셜 로그인(인가코드 발급) - Method: `GET` - Url: 각 소셜 로그인 문서 참고 - Parameter: - `client_id`: 앱 ID - `redirect_uri`: 인가 코드를 전달받을 프런트 URI(redirect_uri는 소셜 앱 설정에 등록해야합니다.) - `response_type`: `code`로 고정 - `state`: `kakao` | `naver` | `google` | `apple` | `facebook` - Description: - 소셜 로그인을 진행할 페이지를 띄워야 하기 때문에 route를 이동해줘야 합니다. - `redirect_uri`는 소셜 로그인 후 돌아올 프런트 URI이며 쿼리 스트링과 함께 리턴 받습니다. - 소셜 로그인 후 해당 페이지에서 쿼리 스트링의 code와 state를 읽어 저장해둔다. 2. 소셜 로그인(인가코드 검증) 3. 소셜 회원가입 - `isRegister: true`인 경우 `access`, `refresh`를 저장 후 로그인 처리를 합니다. - `isRegister: false`인 경우 `socialToken`을 사용해 회원가입을 진행합니다.
 *
 * @tags user
 * @name UserSocialLoginCreate
 * @summary 유저 소셜 로그인
 * @request POST:/v1/user/social_login/
 * @secure  */

export const useUserSocialLoginCreateMutation = (
  params: MutationHookParams<
    typeof userApi.userSocialLoginCreate,
    { error: UserSocialLoginValidationErrorType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API.SOCIAL_LOGIN_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: userApi.userSocialLoginCreate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags user
 * @name UserRetrieve
 * @summary 유저 조회
 * @request GET:/v1/user/{id}/
 * @secure    */

export const useUserRetrieveQuery = <
  TData = RequestFnReturn<typeof userApi.userRetrieve>,
>(
  params: QueryHookParams<
    typeof userApi.userRetrieve,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_USER_API.RETRIEVE(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => userApi.userRetrieve(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags user
 * @name UserUpdate
 * @summary 유저 수정
 * @request PUT:/v1/user/{id}/
 * @secure  */

export const useUserUpdateMutation = (
  params: MutationHookParams<
    typeof userApi.userUpdate,
    { error: UserErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API.UPDATE()
  return useMutation({
    mutationKey,
    mutationFn: userApi.userUpdate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags user
 * @name UserDestroy
 * @summary 유저 삭제(탈퇴)
 * @request DELETE:/v1/user/{id}/
 * @secure  */

export const useUserDestroyMutation = (
  params: MutationHookParams<
    typeof userApi.userDestroy,
    { error: CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_USER_API.DESTROY()
  return useMutation({
    mutationKey,
    mutationFn: userApi.userDestroy,
    ...params?.options,
  })
}
