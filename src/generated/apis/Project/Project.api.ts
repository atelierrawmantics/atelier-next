import { ContentType, HttpClient, RequestParams } from '../@http-client'
import {
  CommonErrorType,
  PaginatedProjectListType,
  ProjectErrorMessageType,
  ProjectRequestType,
  ProjectShareErrorMessageType,
  ProjectShareRequestType,
  ProjectShareType,
  ProjectType,
} from '../@types/data-contracts'
import { DeepOmitReadOnly } from '../@types/util-types'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export class ProjectApi<
  SecurityDataType = unknown,
> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @tags project
   * @name ProjectList
   * @summary 프로젝트 목록 조회
   * @request GET:/v1/project/
   * @secure
   */

  projectList = (variables?: {
    query?: {
      /** The pagination cursor value. */
      cursor?: string
      /** Number of results to return per page. */
      page_size?: number
    }
    params?: RequestParams
  }) =>
    this.request<PaginatedProjectListType, CommonErrorType>({
      path: `/v1/project/`,
      method: 'GET',
      query: variables?.query,
      secure: true,
      format: 'json',
      ...variables?.params,
    }) /**
   * No description
   *
   * @tags project
   * @name ProjectCreate
   * @summary 프로젝트 등록
   * @request POST:/v1/project/
   * @secure
   */

  projectCreate = (variables: {
    data: DeepOmitReadOnly<ProjectRequestType>
    params?: RequestParams
  }) =>
    this.request<ProjectType, ProjectErrorMessageType | CommonErrorType>({
      path: `/v1/project/`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags project
   * @name ProjectRetrieve
   * @summary 프로젝트 상세 조회
   * @request GET:/v1/project/{slug}/
   * @secure
   */

  projectRetrieve = (variables: { slug: string; params?: RequestParams }) =>
    this.request<ProjectType, CommonErrorType>({
      path: `/v1/project/${variables.slug}/`,
      method: 'GET',
      secure: true,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags project
   * @name ProjectUpdate
   * @summary 프로젝트 수정
   * @request PUT:/v1/project/{slug}/
   * @secure
   */

  projectUpdate = (variables: {
    slug: string
    data: DeepOmitReadOnly<ProjectRequestType>
    params?: RequestParams
  }) =>
    this.request<ProjectType, ProjectErrorMessageType | CommonErrorType>({
      path: `/v1/project/${variables.slug}/`,
      method: 'PUT',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    }) /**
   * No description
   *
   * @tags project
   * @name ProjectDestroy
   * @summary 프로젝트 삭제
   * @request DELETE:/v1/project/{slug}/
   * @secure
   */

  projectDestroy = (variables: { slug: string; params?: RequestParams }) =>
    this.request<void, CommonErrorType>({
      path: `/v1/project/${variables.slug}/`,
      method: 'DELETE',
      secure: true,
      ...variables.params,
    }) /**
   * No description
   *
   * @tags project
   * @name ProjectShareCreate
   * @summary 프로젝트 공유
   * @request POST:/v1/project/{slug}/share/
   * @secure
   */

  projectShareCreate = (variables: {
    slug: string
    data: DeepOmitReadOnly<ProjectShareRequestType>
    params?: RequestParams
  }) =>
    this.request<
      ProjectShareType,
      ProjectShareErrorMessageType | CommonErrorType
    >({
      path: `/v1/project/${variables.slug}/share/`,
      method: 'POST',
      body: variables.data,
      secure: true,
      type: ContentType.Json,
      format: 'json',
      ...variables.params,
    })
}

//
