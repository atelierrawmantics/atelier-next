import {
  InfiniteData,
  useInfiniteQuery,
  useMutation,
  useQuery,
} from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import {
  CommonErrorType,
  ProjectErrorMessageType,
  ProjectShareErrorMessageType,
} from '../@types/data-contracts'
import {
  InfiniteQueryHookParams,
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { ProjectApi } from './Project.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const projectApi = new ProjectApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_PROJECT_API = {
  LIST: (variables?: Parameter<typeof projectApi.projectList>) =>
    ['PROJECT_LIST', variables].filter(isDefined),
  LIST_INFINITE: (variables?: Parameter<typeof projectApi.projectList>) =>
    ['PROJECT_LIST_INFINITE', variables].filter(isDefined),
  CREATE: () => ['PROJECT_CREATE'],
  RETRIEVE: (variables?: Parameter<typeof projectApi.projectRetrieve>) =>
    ['PROJECT_RETRIEVE', variables].filter(isDefined),
  UPDATE: () => ['PROJECT_UPDATE'],
  DESTROY: () => ['PROJECT_DESTROY'],
  SHARE_CREATE: () => ['PROJECT_SHARE_CREATE'],
}

/**
 * No description
 *
 * @tags project
 * @name ProjectList
 * @summary 프로젝트 목록 조회
 * @request GET:/v1/project/
 * @secure    */

export const useProjectListQuery = <
  TData = RequestFnReturn<typeof projectApi.projectList>,
>(
  params?: QueryHookParams<
    typeof projectApi.projectList,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PROJECT_API.LIST(params?.variables)
  return useQuery({
    queryKey,
    queryFn: () => projectApi.projectList(params?.variables),
    ...params?.options,
  })
}

/**
 * No description    *      * @tags project
 * @name ProjectList
 * @summary 프로젝트 목록 조회
 * @request GET:/v1/project/
 * @secure    */
export const useProjectListInfiniteQuery = <
  TData = InfiniteData<
    RequestFnReturn<typeof projectApi.projectList>,
    Parameter<typeof projectApi.projectList>
  >,
>(
  params?: InfiniteQueryHookParams<
    typeof projectApi.projectList,
    CommonErrorType,
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PROJECT_API.LIST_INFINITE(params?.variables)
  return useInfiniteQuery({
    queryKey,
    initialPageParam: null,
    queryFn: ({ pageParam }: { pageParam: any }) => {
      return projectApi.projectList({
        ...params?.variables,
        query:
          pageParam ?
            { ...params?.variables?.query, cursor: pageParam }
          : { ...params?.variables?.query },
      })
    },
    getNextPageParam: (lastPage) => {
      return lastPage.cursor
    },
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags project
 * @name ProjectCreate
 * @summary 프로젝트 등록
 * @request POST:/v1/project/
 * @secure  */

export const useProjectCreateMutation = (
  params: MutationHookParams<
    typeof projectApi.projectCreate,
    { error: ProjectErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_PROJECT_API.CREATE()
  return useMutation({
    mutationKey,
    mutationFn: projectApi.projectCreate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags project
 * @name ProjectRetrieve
 * @summary 프로젝트 상세 조회
 * @request GET:/v1/project/{slug}/
 * @secure    */

export const useProjectRetrieveQuery = <
  TData = RequestFnReturn<typeof projectApi.projectRetrieve>,
>(
  params: QueryHookParams<
    typeof projectApi.projectRetrieve,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_PROJECT_API.RETRIEVE(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => projectApi.projectRetrieve(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags project
 * @name ProjectUpdate
 * @summary 프로젝트 수정
 * @request PUT:/v1/project/{slug}/
 * @secure  */

export const useProjectUpdateMutation = (
  params: MutationHookParams<
    typeof projectApi.projectUpdate,
    { error: ProjectErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_PROJECT_API.UPDATE()
  return useMutation({
    mutationKey,
    mutationFn: projectApi.projectUpdate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags project
 * @name ProjectDestroy
 * @summary 프로젝트 삭제
 * @request DELETE:/v1/project/{slug}/
 * @secure  */

export const useProjectDestroyMutation = (
  params: MutationHookParams<
    typeof projectApi.projectDestroy,
    { error: CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_PROJECT_API.DESTROY()
  return useMutation({
    mutationKey,
    mutationFn: projectApi.projectDestroy,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags project
 * @name ProjectShareCreate
 * @summary 프로젝트 공유
 * @request POST:/v1/project/{slug}/share/
 * @secure  */

export const useProjectShareCreateMutation = (
  params: MutationHookParams<
    typeof projectApi.projectShareCreate,
    { error: ProjectShareErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_PROJECT_API.SHARE_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: projectApi.projectShareCreate,
    ...params?.options,
  })
}
