import { useMutation, useQuery } from '@tanstack/react-query'

import { fetchExtended } from '@/configs/fetch/fetch-extend'

import { CommonErrorType, TaskErrorMessageType } from '../@types/data-contracts'
import {
  MutationHookParams,
  Parameter,
  QueryHookParams,
  RequestFnReturn,
} from '../@types/react-query-type'
import { TaskApi } from './Task.api'

/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

/**
 * tok-cli.config.ts 에서 설정된 instance 경로의 axios instace 가 적용된, api 의 instance 입니다.
 */
export const taskApi = new TaskApi({ customFetch: fetchExtended })

/**
 * query key 에 undefined 를 포함시키지 않기 위한 함수입니다.
 */
const isDefined = (v: unknown) => typeof v !== 'undefined'

/**
 * query-keys
 */
export const QUERY_KEY_TASK_API = {
  PROJECT_TASK_LIST: (variables?: Parameter<typeof taskApi.projectTaskList>) =>
    ['PROJECT_TASK_LIST', variables].filter(isDefined),
  PROJECT_TASK_CREATE: () => ['PROJECT_TASK_CREATE'],
  PROJECT_TASK_RETRIEVE: (
    variables?: Parameter<typeof taskApi.projectTaskRetrieve>,
  ) => ['PROJECT_TASK_RETRIEVE', variables].filter(isDefined),
  PROJECT_TASK_PARTIAL_UPDATE: () => ['PROJECT_TASK_PARTIAL_UPDATE'],
  PROJECT_TASK_DESTROY: () => ['PROJECT_TASK_DESTROY'],
}

/**
 * No description
 *
 * @tags task
 * @name ProjectTaskList
 * @summary 태스크 목록 조회
 * @request GET:/v1/project/{project_slug}/task/
 * @secure    */

export const useProjectTaskListQuery = <
  TData = RequestFnReturn<typeof taskApi.projectTaskList>,
>(
  params: QueryHookParams<
    typeof taskApi.projectTaskList,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_TASK_API.PROJECT_TASK_LIST(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => taskApi.projectTaskList(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags task
 * @name ProjectTaskCreate
 * @summary 태스크 등록
 * @request POST:/v1/project/{project_slug}/task/
 * @secure  */

export const useProjectTaskCreateMutation = (
  params: MutationHookParams<
    typeof taskApi.projectTaskCreate,
    { error: TaskErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_TASK_API.PROJECT_TASK_CREATE()
  return useMutation({
    mutationKey,
    mutationFn: taskApi.projectTaskCreate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags task
 * @name ProjectTaskRetrieve
 * @summary 태스크 상세 조회
 * @request GET:/v1/project/{project_slug}/task/{slug}/
 * @secure    */

export const useProjectTaskRetrieveQuery = <
  TData = RequestFnReturn<typeof taskApi.projectTaskRetrieve>,
>(
  params: QueryHookParams<
    typeof taskApi.projectTaskRetrieve,
    { error: CommonErrorType },
    TData
  >,
) => {
  const queryKey = QUERY_KEY_TASK_API.PROJECT_TASK_RETRIEVE(params.variables)
  return useQuery({
    queryKey,
    queryFn: () => taskApi.projectTaskRetrieve(params.variables),
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags task
 * @name ProjectTaskPartialUpdate
 * @summary 태스크 수정
 * @request PATCH:/v1/project/{project_slug}/task/{slug}/
 * @secure  */

export const useProjectTaskPartialUpdateMutation = (
  params: MutationHookParams<
    typeof taskApi.projectTaskPartialUpdate,
    { error: TaskErrorMessageType | CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_TASK_API.PROJECT_TASK_PARTIAL_UPDATE()
  return useMutation({
    mutationKey,
    mutationFn: taskApi.projectTaskPartialUpdate,
    ...params?.options,
  })
}

/**
 * No description
 *
 * @tags task
 * @name ProjectTaskDestroy
 * @summary 태스크 삭제
 * @request DELETE:/v1/project/{project_slug}/task/{slug}/
 * @secure  */

export const useProjectTaskDestroyMutation = (
  params: MutationHookParams<
    typeof taskApi.projectTaskDestroy,
    { error: CommonErrorType }
  >,
) => {
  const mutationKey = QUERY_KEY_TASK_API.PROJECT_TASK_DESTROY()
  return useMutation({
    mutationKey,
    mutationFn: taskApi.projectTaskDestroy,
    ...params?.options,
  })
}
