/**
 * !DO NOT EDIT THIS FILE
 *
 * 스크립트가 실행될때, 파일을 항상 새로 쓰기 때문에 파일 수정시 작성내용이 제거 될 수 있습니다.
 */

export interface CommonErrorType {
  detail: string
}

export interface InstructionType {
  /**
   * 년도
   * @maxLength 4
   */
  year: string
  /**
   * 시즌
   * @maxLength 100
   */
  season: string
  /**
   * 스타일
   * @maxLength 100
   */
  style: string
  /**
   * 품명
   * @maxLength 100
   */
  variant: string
  /**
   * 아이템
   * @maxLength 100
   */
  item: string
  /**
   * 차수
   * @maxLength 100
   */
  generation: string
  /** 도식화 */
  schematic: InstructionSchematicType | null
  /** 사이즈명 */
  sizeNames: string[][]
  /** 사이즈 */
  sizeValues: string[][]
  /** 컬러 */
  colorValues: string[][]
  /** 원단 */
  fabricValues: string[][]
  /** 부자재 */
  materialValues: string[][]
  /** 스와치 */
  swatchSet: InstructionSwatchType[]
}

export interface InstructionErrorMessageType {
  nonField?: string[]
  year?: string[]
  season?: string[]
  style?: string[]
  variant?: string[]
  item?: string[]
  generation?: string[]
  schematic?: InstructionSchematicValidationErrorType
  sizeNames?: string[]
  sizeValues?: string[]
  colorValues?: string[]
  fabricValues?: string[]
  materialValues?: string[]
  swatchSet?: string[]
}

export interface InstructionSchematicType {
  readonly id: number
  /** 이미지 */
  image: string
}

export interface InstructionSchematicRequestType {
  /**
   * 이미지
   * @minLength 1
   */
  image: string
}

export interface InstructionSchematicValidationErrorType {
  image?: string[]
}

export interface InstructionSwatchType {
  id: number | null
  /** 이미지 */
  image: string
}

export interface InstructionSwatchRequestType {
  id: number | null
  /**
   * 이미지
   * @minLength 1
   */
  image: string
}

export interface PaginatedProjectListType {
  count?: number
  cursor?: string | null
  results?: ProjectType[]
}

export interface PaginatedSchematicListType {
  count?: number
  cursor?: string | null
  results?: SchematicType[]
}

export interface PatchedInstructionRequestType {
  /**
   * 년도
   * @maxLength 4
   */
  year?: string
  /**
   * 시즌
   * @maxLength 100
   */
  season?: string
  /**
   * 스타일
   * @maxLength 100
   */
  style?: string
  /**
   * 품명
   * @maxLength 100
   */
  variant?: string
  /**
   * 아이템
   * @maxLength 100
   */
  item?: string
  /**
   * 차수
   * @maxLength 100
   */
  generation?: string
  /** 도식화 */
  schematic?: InstructionSchematicRequestType | null
  /** 사이즈명 */
  sizeNames?: string[][]
  /** 사이즈 */
  sizeValues?: string[][]
  /** 컬러 */
  colorValues?: string[][]
  /** 원단 */
  fabricValues?: string[][]
  /** 부자재 */
  materialValues?: string[][]
  /** 스와치 */
  swatchSet?: InstructionSwatchRequestType[]
}

export interface PatchedTaskRequestType {
  /**
   * 슬러그
   * @minLength 1
   * @maxLength 8
   * @pattern ^[-a-zA-Z0-9_]+$
   */
  slug?: string
  /**
   * 태스크명
   * @minLength 1
   * @maxLength 30
   */
  name?: string
  /**
   * 태스크 설명
   * @minLength 1
   * @maxLength 500
   */
  description?: string
  /**
   * 메모
   * @maxLength 500
   */
  memo?: string
  /**
   * 담당자 이름
   * @maxLength 30
   */
  managerName?: string
  /**
   * 담당자 휴대폰 번호
   * @maxLength 11
   */
  managerPhone?: string
  /** 알림 수신 여부 */
  isAlarm?: boolean
  /**
   * 상태
   * * `pending` - 진행전
   * * `in_progress` - 진행중
   * * `completed` - 진행완료
   * * `issue` - 이슈
   */
  status?: PatchedTaskRequestStatusEnumType
}

export interface PhoneVerifierType {
  /**
   * 휴대폰번호
   * @maxLength 11
   */
  phone: string
  /** 인증번호 */
  readonly code: string
}

export interface PhoneVerifierConfirmType {
  readonly token: string
}

export interface PhoneVerifierConfirmErrorMessageType {
  nonField?: string[]
  phone?: string[]
  code?: string[]
}

export interface PhoneVerifierConfirmRequestType {
  /** @minLength 1 */
  phone: string
  /** @minLength 1 */
  code: string
}

export interface PhoneVerifierErrorMessageType {
  nonField?: string[]
  phone?: string[]
}

export interface PhoneVerifierRequestType {
  /**
   * 휴대폰번호
   * @minLength 1
   * @maxLength 11
   */
  phone: string
}

export interface PresignedType {
  /** @format uri */
  readonly url: string
  readonly fields: any
}

export interface PresignedErrorMessageType {
  nonField?: string[]
  fileName?: string[]
  fileType?: string[]
  fieldChoice?: string[]
  isDownload?: string[]
}

export interface PresignedRequestType {
  /** @minLength 1 */
  fileName: string
  /**
   * * `image` - 이미지 그래픽 데이터(i.e. jpeg, png, gif, apng, etc.)
   * * `audio` - 오디오/음악 데이터(i.e. mpeg, vorbis, etc.)
   * * `text` - 텍스트 데이터(i.e. plain, csv, html, etc.)
   * * `video` - 비디오 데이터(i.e. mp4, etc.)
   * * `application` - 이진 데이터(i.e. pdf, zip, pkcs8, etc.)
   */
  fileType: PresignedRequestFileTypeEnumType
  /**
   * * `schematic.Schematic.image` - 이미지
   * * `swatch.Swatch.image` - 이미지
   */
  fieldChoice: PresignedRequestFieldChoiceEnumType
  isDownload?: boolean
}

export interface ProjectType {
  readonly id: number
  /**
   * 슬러그
   * @pattern ^[-a-zA-Z0-9_]+$
   */
  readonly slug: string
  /**
   * 프로젝트명
   * @maxLength 30
   */
  name: string
  /**
   * 프로젝트 설명
   * @maxLength 500
   */
  description: string
  /**
   * 고객사명
   * @maxLength 30
   */
  clientName: string
  /**
   * 고객사 설명
   * @maxLength 500
   */
  clientDescription: string
  /** 공유여부 */
  readonly isShared: boolean
  /**
   * 공유 URL
   * @format uri
   */
  readonly sharedUrl: string
  /**
   * 소유여부
   * @default false
   */
  readonly isOwned: boolean
  /**
   * 생성일시
   * @format date-time
   */
  readonly createdAt: string
  /**
   * 수정일시
   * @format date-time
   */
  readonly updatedAt: string
}

export interface ProjectErrorMessageType {
  nonField?: string[]
  name?: string[]
  description?: string[]
  clientName?: string[]
  clientDescription?: string[]
}

export interface ProjectRequestType {
  /**
   * 프로젝트명
   * @minLength 1
   * @maxLength 30
   */
  name: string
  /**
   * 프로젝트 설명
   * @minLength 1
   * @maxLength 500
   */
  description: string
  /**
   * 고객사명
   * @maxLength 30
   */
  clientName: string
  /**
   * 고객사 설명
   * @maxLength 500
   */
  clientDescription: string
}

export interface ProjectShareType {
  /** 공유여부 */
  isShared?: boolean
}

export interface ProjectShareErrorMessageType {
  nonField?: string[]
  isShared?: string[]
}

export interface ProjectShareRequestType {
  /** 공유여부 */
  isShared?: boolean
}

export interface SchematicType {
  readonly id: number
  /**
   * 이미지
   * @format uri
   */
  readonly image: string
  /**
   * 프롬프트
   * @maxLength 500
   */
  prompt?: string
  /**
   * 상태
   * * `PENDING` - 대기
   * * `SUCCESS` - 성공
   * * `FAILED` - 실패
   */
  readonly status: SchematicStatusEnumType
}

export interface SchematicErrorMessageType {
  nonField?: string[]
  prompt?: string[]
}

export interface SchematicRequestType {
  /**
   * 프롬프트
   * @maxLength 500
   */
  prompt?: string
}

export interface SchematicUseErrorMessageType {
  nonField?: string[]
}

export interface TaskType {
  readonly id: number
  /**
   * 슬러그
   * @maxLength 8
   * @pattern ^[-a-zA-Z0-9_]+$
   */
  slug: string
  /**
   * 태스크명
   * @maxLength 30
   */
  name: string
  /**
   * 태스크 설명
   * @maxLength 500
   */
  description: string
  /**
   * 메모
   * @maxLength 500
   */
  memo: string
  /**
   * 담당자 이름
   * @maxLength 30
   */
  managerName: string
  /**
   * 담당자 휴대폰 번호
   * @maxLength 11
   */
  managerPhone: string
  /** 알림 수신 여부 */
  isAlarm: boolean
  /**
   * 상태
   * * `pending` - 진행전
   * * `in_progress` - 진행중
   * * `completed` - 진행완료
   * * `issue` - 이슈
   */
  status?: TaskStatusEnumType
  /**
   * 생성일시
   * @format date-time
   */
  readonly createdAt: string
  /**
   * 수정일시
   * @format date-time
   */
  readonly updatedAt: string
}

export interface TaskErrorMessageType {
  nonField?: string[]
  slug?: string[]
  name?: string[]
  description?: string[]
  memo?: string[]
  managerName?: string[]
  managerPhone?: string[]
  isAlarm?: string[]
  status?: string[]
}

export interface TaskRequestType {
  /**
   * 슬러그
   * @minLength 1
   * @maxLength 8
   * @pattern ^[-a-zA-Z0-9_]+$
   */
  slug: string
  /**
   * 태스크명
   * @minLength 1
   * @maxLength 30
   */
  name: string
  /**
   * 태스크 설명
   * @minLength 1
   * @maxLength 500
   */
  description: string
  /**
   * 메모
   * @maxLength 500
   */
  memo: string
  /**
   * 담당자 이름
   * @maxLength 30
   */
  managerName: string
  /**
   * 담당자 휴대폰 번호
   * @maxLength 11
   */
  managerPhone: string
  /** 알림 수신 여부 */
  isAlarm: boolean
  /**
   * 상태
   * * `pending` - 진행전
   * * `in_progress` - 진행중
   * * `completed` - 진행완료
   * * `issue` - 이슈
   */
  status?: TaskRequestStatusEnumType
}

export interface UserType {
  readonly id: number
  /**
   * 이름
   * @maxLength 10
   */
  name: string
  /**
   * 생년월일
   * @maxLength 8
   */
  birth: string
  /** 휴대폰 */
  readonly phone: string
}

export interface UserErrorMessageType {
  nonField?: string[]
  name?: string[]
  birth?: string[]
}

export interface UserRefreshType {
  refreshToken: string
  readonly accessToken: string
}

export interface UserRefreshErrorMessageType {
  nonField?: string[]
  refreshToken?: string[]
}

export interface UserRefreshRequestType {
  /** @minLength 1 */
  refreshToken: string
}

export interface UserRegisterType {
  readonly accessToken: string
  readonly refreshToken: string
}

export interface UserRegisterErrorMessageType {
  nonField?: string[]
  registerToken?: string[]
  name?: string[]
  birth?: string[]
  phone?: string[]
  phoneToken?: string[]
}

export interface UserRegisterRequestType {
  /**
   * 소셜 로그인 토큰
   * @minLength 1
   */
  registerToken: string
  /** @minLength 1 */
  name: string
  /** @minLength 1 */
  birth: string
  /** @minLength 1 */
  phone: string
  /**
   * phone verifier를 통해 얻은 token값입니다.
   * @minLength 1
   */
  phoneToken: string
}

export interface UserRequestType {
  /**
   * 이름
   * @minLength 1
   * @maxLength 10
   */
  name: string
  /**
   * 생년월일
   * @minLength 1
   * @maxLength 8
   */
  birth: string
}

export interface UserSocialLoginType {
  readonly accessToken: string
  readonly refreshToken: string
}

export interface UserSocialLoginRequestType {
  /** @minLength 1 */
  code?: string
  /** @minLength 1 */
  socialAccessToken?: string
  /**
   * * `kakao` - 카카오
   * * `naver` - 네이버
   */
  state: UserSocialLoginRequestStateEnumType
}

export interface UserSocialLoginValidationErrorType {
  /** 회원가입 토큰 */
  registerToken?: string
  nonField?: string[]
  code?: string[]
  state?: string[]
}

/**
 * * `pending` - 진행전
 * `in_progress` - 진행중
 * `completed` - 진행완료
 * `issue` - 이슈
 */
export type PatchedTaskRequestStatusEnumType =
  keyof typeof PatchedTaskRequestStatusEnumTypeMap
export const PatchedTaskRequestStatusEnumTypeMap = {
  completed: '진행완료',
  in_progress: '진행중',
  issue: '이슈',
  pending: '진행전',
} as const

/**
 * * `image` - 이미지 그래픽 데이터(i.e. jpeg, png, gif, apng, etc.)
 * `audio` - 오디오/음악 데이터(i.e. mpeg, vorbis, etc.)
 * `text` - 텍스트 데이터(i.e. plain, csv, html, etc.)
 * `video` - 비디오 데이터(i.e. mp4, etc.)
 * `application` - 이진 데이터(i.e. pdf, zip, pkcs8, etc.)
 */
export type PresignedRequestFileTypeEnumType =
  keyof typeof PresignedRequestFileTypeEnumTypeMap
export const PresignedRequestFileTypeEnumTypeMap = {
  application: '이진 데이터(i.e. pdf, zip, pkcs8, etc.)',
  audio: '오디오/음악 데이터(i.e. mpeg, vorbis, etc.)',
  image: '이미지 그래픽 데이터(i.e. jpeg, png, gif, apng, etc.)',
  text: '텍스트 데이터(i.e. plain, csv, html, etc.)',
  video: '비디오 데이터(i.e. mp4, etc.)',
} as const

/**
 * * `schematic.Schematic.image` - 이미지
 * `swatch.Swatch.image` - 이미지
 */
export type PresignedRequestFieldChoiceEnumType =
  keyof typeof PresignedRequestFieldChoiceEnumTypeMap
export const PresignedRequestFieldChoiceEnumTypeMap = {
  'schematic.Schematic.image': '이미지',
  'swatch.Swatch.image': '이미지',
} as const

/**
 * * `PENDING` - 대기
 * `SUCCESS` - 성공
 * `FAILED` - 실패
 */
export type SchematicStatusEnumType = keyof typeof SchematicStatusEnumTypeMap
export const SchematicStatusEnumTypeMap = {
  FAILED: '실패',
  PENDING: '대기',
  SUCCESS: '성공',
} as const

/**
 * * `pending` - 진행전
 * `in_progress` - 진행중
 * `completed` - 진행완료
 * `issue` - 이슈
 */
export type TaskStatusEnumType = keyof typeof TaskStatusEnumTypeMap
export const TaskStatusEnumTypeMap = {
  completed: '진행완료',
  in_progress: '진행중',
  issue: '이슈',
  pending: '진행전',
} as const

/**
 * * `pending` - 진행전
 * `in_progress` - 진행중
 * `completed` - 진행완료
 * `issue` - 이슈
 */
export type TaskRequestStatusEnumType =
  keyof typeof TaskRequestStatusEnumTypeMap
export const TaskRequestStatusEnumTypeMap = {
  completed: '진행완료',
  in_progress: '진행중',
  issue: '이슈',
  pending: '진행전',
} as const

/**
 * * `kakao` - 카카오
 * `naver` - 네이버
 */
export type UserSocialLoginRequestStateEnumType =
  keyof typeof UserSocialLoginRequestStateEnumTypeMap
export const UserSocialLoginRequestStateEnumTypeMap = {
  kakao: '카카오',
  naver: '네이버',
} as const
